{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["httpClient","axios","create","baseURL","process","App","state","tasks","inputTaskName","inputTaskDescription","event","preventDefault","this","length","post","Title","Description","Status","then","response","alert","getTasks","catch","err","console","log","get","data","map","task","id","_id","setState","delete","put","Grid","item","xs","Card","style","backgroundColor","CardContent","CardActions","Button","variant","color","startIcon","onClick","deleteTask","finishTask","container","spacing","justifyContent","noValidate","autoComplete","onSubmit","handleSubmit","bind","TextField","label","onInput","e","target","value","type","renderTasks","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9fc7e679.chunk.js","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CheckCircleOutlineIcon from \"@material-ui/icons/CheckCircleOutline\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\nconst httpClient = axios.create({\r\n  baseURL: process.env.REACT_APP_ENDPOINT\r\n});\r\n\r\nexport default class App extends React.Component {\r\n  \r\n  httpClient = axios.create({\r\n    baseURL: process.env.REACT_APP_ENDPOINT\r\n  });\r\n\r\n  state = {\r\n    tasks: [],\r\n    inputTaskName: \"\",\r\n    inputTaskDescription: \"\",\r\n  };\r\n\r\n  // form submit function\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    // check if the input is filled\r\n    if (this.state.inputTaskName.length > 0 && this.state.inputTaskDescription.length > 0) {\r\n      httpClient.post(\"/Tasks\", {\r\n        Title: this.state.inputTaskName,\r\n        Description: this.state.inputTaskDescription,\r\n        Status: \"Pending\"\r\n      })\r\n        .then((response) => {\r\n          alert(\"Item inserted with success!\");\r\n          // refresh tasks\r\n          this.getTasks();\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    } else {\r\n      alert(\"You need to fill all the fields!\");\r\n    }\r\n  }\r\n\r\n  // get tasks from API\r\n  getTasks() {\r\n    httpClient.get(\"/Tasks\")\r\n      .then((response) => {\r\n        let data = response.data;\r\n        data = data.map((task) => {\r\n          task.id = task._id;\r\n          return task;\r\n        });\r\n        this.setState({ tasks: data });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  deleteTask(id) {\r\n    httpClient.delete(`/Tasks/${id}`)\r\n      .then(() => {\r\n        alert(`Task ${id} deleted with success!`);\r\n        this.getTasks();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getTasks();\r\n  }\r\n\r\n  finishTask(task) {\r\n    console.log(task);\r\n    httpClient.put(`/Tasks/${task.id}`, { Status: \"Done\" })\r\n      .then((response) => {\r\n        const data = response.data;\r\n        alert(`Task ${data.Title} completed!`);\r\n        this.getTasks();\r\n        return data;\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  renderTasks(task) {\r\n    return (\r\n      <Grid item xs={4}>\r\n        <Card style= {{ backgroundColor: task.Status === \"Pending\" ? \"orange\" : \"white\" }}>\r\n        <CardContent>\r\n          {task.Title}\r\n          <hr />\r\n          {task.Description}\r\n          <hr />\r\n          {task.Status}\r\n          <hr />\r\n        </CardContent>\r\n        <CardActions>\r\n           <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              startIcon={<DeleteIcon />}\r\n              onClick={ () => { this.deleteTask(task._id) } }\r\n            >\r\n              Delete task\r\n            </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            id={`finish-${task._id}`}\r\n            onClick={ () => { this.finishTask(task) }}\r\n            startIcon={<CheckCircleOutlineIcon/>}>\r\n              Finish task\r\n          </Button>\r\n        </CardActions>\r\n        </Card>\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n      <Grid container spacing={5} style={{ justifyContent: \"center\" }}>\r\n        <form noValidate autoComplete=\"off\" onSubmit={this.handleSubmit.bind(this)}>\r\n          <TextField id=\"standard-basic\" label=\"Task name\" onInput={e => this.setState({inputTaskName: e.target.value})}/>\r\n          <hr />\r\n          <TextField id=\"filled-basic\" label=\"Description\" onInput={e => this.setState({inputTaskDescription: e.target.value})} />\r\n          <hr />\r\n          <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n            Send\r\n          </Button>\r\n        </form>\r\n      </Grid>\r\n        <Grid container spacing={3}>\r\n          {this.state.tasks.map(this.renderTasks.bind(this))}\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}